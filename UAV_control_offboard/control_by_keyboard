#include "ros/ros.h"
#include <gnc_functions.hpp>
#include "std_msgs/String.h"
#include <iostream>

//include API 


std::vector<gnc_api_waypoint> waypointList;
gnc_api_waypoint nextWayPoint;

float alt=1;
float i=0,j=0,psi=0;
int counter=0;

void forward(){

    j+=1;

  nextWayPoint.x = i;
	nextWayPoint.y = j;
	nextWayPoint.z = alt;
	nextWayPoint.psi = psi;
	waypointList.push_back(nextWayPoint);

	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
	counter++;	
	
}

void backward(){

    j-=1;

  nextWayPoint.x = i;
	nextWayPoint.y = j;
	nextWayPoint.z = alt;
	nextWayPoint.psi = psi;
	waypointList.push_back(nextWayPoint);

	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
	counter++;	
	
}

void left(){

    i-=1;

  nextWayPoint.x = i;
	nextWayPoint.y = j;
	nextWayPoint.z = alt;
	nextWayPoint.psi = psi;
	waypointList.push_back(nextWayPoint);

	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
	counter++;	
	
}

void right(){

    i+=1;

  nextWayPoint.x = i;
	nextWayPoint.y = j;
	nextWayPoint.z = alt;
	nextWayPoint.psi = psi;
	waypointList.push_back(nextWayPoint);

	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
	counter++;	
	
}

void yaw_left(){

    psi+=1;

  nextWayPoint.x = i;
	nextWayPoint.y = j;
	nextWayPoint.z = alt;
	nextWayPoint.psi = psi;
	waypointList.push_back(nextWayPoint);

	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
	counter++;	
	
}

void yaw_right(){

    psi-=1;

  nextWayPoint.x = i;
	nextWayPoint.y = j;
	nextWayPoint.z = alt;
	nextWayPoint.psi = psi;
	waypointList.push_back(nextWayPoint);

	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
	counter++;	
	
}

void stop(){

  nextWayPoint.x = i;
	nextWayPoint.y = j;
	nextWayPoint.z = alt;
	nextWayPoint.psi = psi;
	waypointList.push_back(nextWayPoint);

	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
	counter++;	
	
}


void callBack(std_msgs::String::ConstPtr msg){
    ros::Rate rate(2.0);
    int counter = 0;

        while(ros::ok())
        {
            ros::spinOnce();
            rate.sleep();
            ROS_INFO("1");

            switch(msg->data[0]){
                case 'w':
                {
                    forward();
                    ROS_INFO("forward");
                    std::cout<<msg->data[0] << std::endl;
                    break;
                }
            

                case 'a':
                {
                    left();
                    ROS_INFO("left");
                    std::cout<<msg->data[0] << std::endl;
                    break;
                }
            
                case 's':
                {
                    backward();
                    ROS_INFO("back");
                    std::cout<<msg->data[0] << std::endl;
                    break;
                }
            
            
                case 'd':
                {
                    right();
                    ROS_INFO("right");
                    std::cout<<msg->data[0] << std::endl;
                    break;
                }
            

                case 'e':
                {
                    yaw_right();
                    ROS_INFO("yaw_right");
                    std::cout<<msg->data[0] << std::endl;
                    break;
                }
            

                case 'q':
                {
                    yaw_left();
                    ROS_INFO("yaw_left");
                    std::cout<<msg->data[0] << std::endl;
                    break;
                }

                case 'r':
                {
                    stop();
                    ROS_INFO("stop");
                    std::cout<<msg->data[0] << std::endl;
                    break;
                }

                case 'l':
                {
                    land();
                    ROS_INFO("land");
                    std::cout<<msg->data[0] << std::endl;
					counter=0;
                    break;
                }
            // if(check_waypoint_reached(.3) == 1)
            // {
            //     if (counter < waypointList.size())
            //     {
            //         ROS_INFO("11");
            //         set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
            //         counter++;	
            //     }else{
            //         //land after all waypoints are reached
            //         land();
            //     }	
            // }	
            
        }
    }
}



int main(int argc, char** argv)
{
	//initialize ros 
	ros::init(argc, argv, "gnc_node");
	ros::NodeHandle gnc_node;
	std::string topicName="keyboard_controll";


	//initialize control publisher/subscribers
	init_publisher_subscriber(gnc_node);

  	// wait for FCU connection
	wait4connect();

	//wait for used to switch to mode GUIDED
	set_mode("GUIDED");	

	//create local reference frame 
	initialize_local_frame();

	//request takeoff
	takeoff(alt);

    const ros::Subscriber &subscriber = gnc_node.subscribe<std_msgs::String>(topicName, 1000, callBack);

    ros::spin();
	//specify some waypoints 

	// nextWayPoint.x = 0;
	// nextWayPoint.y = 0;
	// nextWayPoint.z = 3;
	// nextWayPoint.psi = 0;
	// waypointList.push_back(nextWayPoint);
	// nextWayPoint.x = 5;
	// nextWayPoint.y = 0;
	// nextWayPoint.z = 3;
	// nextWayPoint.psi = -90;
	// waypointList.push_back(nextWayPoint);
	// nextWayPoint.x = 5;
	// nextWayPoint.y = 5;
	// nextWayPoint.z = 3;
	// nextWayPoint.psi = 0;
	// waypointList.push_back(nextWayPoint);
	// nextWayPoint.x = 0;
	// nextWayPoint.y = 5;
	// nextWayPoint.z = 3;
	// nextWayPoint.psi = 90;
	// waypointList.push_back(nextWayPoint);
	// nextWayPoint.x = 0;
	// nextWayPoint.y = 0;
	// nextWayPoint.z = 3;
	// nextWayPoint.psi = 180;
	// waypointList.push_back(nextWayPoint);
	// nextWayPoint.x = 0;
	// nextWayPoint.y = 0;
	// nextWayPoint.z = 3;
	// nextWayPoint.psi = 0;
	// waypointList.push_back(nextWayPoint);


	// //specify control loop rate. We recommend a low frequency to not over load the FCU with messages. Too many messages will cause the drone to be sluggish
	// ros::Rate rate(2.0);
	// int counter = 0;
	// while(ros::ok())
	// {
	// 	ros::spinOnce();
	// 	rate.sleep();
	// 	if(check_waypoint_reached(.3) == 1)
	// 	{
	// 		if (counter < waypointList.size())
	// 		{
	// 			ROS_INFO("11");
	// 			set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
	// 			counter++;	
	// 		}else{
	// 			//land after all waypoints are reached
	// 			land();
	// 		}	
	// 	}	
		
	// }
	return 0;
}

// void forward(){

//     i+=1;

//     nextWayPoint.x = i;
// 	nextWayPoint.y = j;
// 	nextWayPoint.z = alt;
// 	nextWayPoint.psi = psi;
// 	waypointList.push_back(nextWayPoint);

// 	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
// 	counter++;	
	
// }

// void backward(){

//     i-=1;

//     nextWayPoint.x = i;
// 	nextWayPoint.y = j;
// 	nextWayPoint.z = alt;
// 	nextWayPoint.psi = psi;
// 	waypointList.push_back(nextWayPoint);

// 	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
// 	counter++;	
	
// }

// void left(){

//     j-=1;

//     nextWayPoint.x = i;
// 	nextWayPoint.y = j;
// 	nextWayPoint.z = alt;
// 	nextWayPoint.psi = psi;
// 	waypointList.push_back(nextWayPoint);

// 	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
// 	counter++;	
	
// }

// void right(){

//     j+=1;

//     nextWayPoint.x = i;
// 	nextWayPoint.y = j;
// 	nextWayPoint.z = alt;
// 	nextWayPoint.psi = psi;
// 	waypointList.push_back(nextWayPoint);

// 	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
// 	counter++;	
	
// }

// void yaw_left(){

//     psi-=1;

//     nextWayPoint.x = i;
// 	nextWayPoint.y = j;
// 	nextWayPoint.z = alt;
// 	nextWayPoint.psi = psi;
// 	waypointList.push_back(nextWayPoint);

// 	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
// 	counter++;	
	
// }

// void yaw_right(){

//     psi+=1;

//     nextWayPoint.x = i;
// 	nextWayPoint.y = j;
// 	nextWayPoint.z = alt;
// 	nextWayPoint.psi = psi;
// 	waypointList.push_back(nextWayPoint);

// 	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
// 	counter++;	
	
// }

// void stop(){

//     nextWayPoint.x = i;
// 	nextWayPoint.y = j;
// 	nextWayPoint.z = alt;
// 	nextWayPoint.psi = psi;
// 	waypointList.push_back(nextWayPoint);

// 	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
// 	counter++;	
	
// }

// void land(){


//     nextWayPoint.x = 0;
// 	nextWayPoint.y = 0;
// 	nextWayPoint.z = 0;
// 	nextWayPoint.psi = 0;
// 	waypointList.push_back(nextWayPoint);

// 	set_destination(waypointList[counter].x,waypointList[counter].y,waypointList[counter].z, waypointList[counter].psi);
// 	counter=0;	
	
// }
