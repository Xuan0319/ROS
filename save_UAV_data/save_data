#include "ros/ros.h"  
#include <geometry_msgs/Vector3.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/NavSatFix.h>
#include <sensor_msgs/Range.h>
#include "std_msgs/String.h"
#include "mavros_msgs/State.h"
#include <ctime>

#include <string>        
#include <iostream>
// #include <cstdio>
// #include <unistd.h>
// #include <math.h>
#include <fstream>


using namespace std;

void callback_gps(const sensor_msgs::NavSatFix::ConstPtr& gps)
{
  float latitude,longitude;

  time_t now = time(0);                     //get real time
  tm *ltm = localtime(&now);            
  string time_stamp=to_string(ltm->tm_hour)+"::"+to_string(ltm->tm_min)+"::"+to_string(ltm->tm_sec);

  latitude=gps->latitude;   

  longitude=gps->longitude;

  fstream file("/home/lai/Desktop/file.csv",ios::app); 
  file << time_stamp << "," << latitude << "," << longitude <<",";

  file.close();
  
  ROS_INFO("%d-%d-%d",ltm->tm_hour,ltm->tm_min,ltm->tm_sec);
  ROS_INFO("\n lat:%f\n lon:%f\n",latitude,longitude);


}


void callback_imu(const sensor_msgs::Imu::ConstPtr& imu)
{
  float gyro_x,gyro_y,gyro_z,accel_x,accel_y,accel_z;  

  // double time_stemp = ros::Time::now().toSec();

  gyro_x=imu->linear_acceleration.x;        //get gyro and accel
  gyro_y=imu->linear_acceleration.y;
  gyro_z=imu->linear_acceleration.z;

  accel_x=imu->angular_velocity.x;
  accel_y=imu->angular_velocity.y;
  accel_z=imu->angular_velocity.z;


  // fstream file("/home/lai/Desktop/file",ios::app);
  fstream file("/home/lai/Desktop/file.csv",ios::app);      //save data to "file.csv"

  if(!file){
    ROS_INFO("Can't find file");
  }
  
  file << gyro_x <<","<< gyro_y <<","<<gyro_z <<","<< accel_x <<","<< accel_y <<","<< accel_z <<",";
  file.close();  


  ROS_INFO("loading data");
  // ROS_INFO("%lf",ros::Time::now().toSec());
  ROS_INFO("\n gyro.x:%f\n gyro.y:%f\n gyro.z:%f\n",gyro_x,gyro_y,gyro_z);
  ROS_INFO("\n accel.x:%f\n accel.y:%f\n accel.z:%f\n",accel_x,accel_y,accel_z);

}

void callback_rng(const sensor_msgs::Range::ConstPtr& rng)        
{
  float range;

  range=rng->range;                             //get flow_range

  fstream file("/home/lai/Desktop/file.csv",ios::app); 
  file << range <<"\n";

  file.close();

  ROS_INFO("\n range:%f\n",range);

}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "save_data");
    
    ros::NodeHandle n;  

    ros::Subscriber imu_sub = n.subscribe("/mavros/imu/data_raw", 100, callback_imu);      
    ros::Subscriber gps_sub = n.subscribe("/mavros/global_position/global", 100, callback_gps);      
    ros::Subscriber rng_sub = n.subscribe("/mavros/rangefinder/rangefinder", 100, callback_rng);      

    ros::spin();
    return 0;
}
